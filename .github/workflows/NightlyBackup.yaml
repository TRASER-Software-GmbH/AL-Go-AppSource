name: 'Nightly Demo Database Backup'

run-name: "Create nightly demo database backup"

on:
  schedule:
    - cron: '0 2 * * *'  # 2 AM daily
  workflow_dispatch:
    inputs:
      bcVersion:
        description: 'BC Version to backup (all, 23.0, 24.0)'
        required: false
        default: 'all'
      forceRecreate:
        description: 'Force recreation even if recent backup exists'
        type: boolean
        default: false

permissions:
  actions: read
  contents: read
  id-token: write

defaults:
  run:
    shell: powershell

env:
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}

jobs:
  Initialization:
    needs: [ ]
    runs-on: [ self-hosted, windows ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      backupVersions: ${{ steps.determineVersions.outputs.backupVersions }}
      githubRunner: ${{ steps.ReadSettings.outputs.GitHubRunnerJson }}
      githubRunnerShell: ${{ steps.ReadSettings.outputs.GitHubRunnerShell }}
    steps:
      - name: Dump Workflow Information
        uses: TRASER-Software-GmbH/AL-Go-Actions/DumpWorkflowInfo@v7.2
        with:
          shell: powershell

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Initialize the workflow
        id: init
        uses: TRASER-Software-GmbH/AL-Go-Actions/WorkflowInitialize@v7.2
        with:
          shell: powershell

      - name: Read settings
        id: ReadSettings
        uses: TRASER-Software-GmbH/AL-Go-Actions/ReadSettings@v7.2
        with:
          shell: powershell
          get: nightlyBackup

      - name: Determine Backup Versions
        id: determineVersions
        run: |
          $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
          
          $settings = $env:Settings | ConvertFrom-Json
          $requestedVersion = '${{ github.event.inputs.bcVersion }}'
          
          if ($settings.PSObject.Properties.Name -contains 'nightlyBackup' -and $settings.nightlyBackup.enabled) {
            $configuredVersions = $settings.nightlyBackup.versions | ForEach-Object { $_.bcVersion }
            
            if ($requestedVersion -eq 'all' -or [string]::IsNullOrEmpty($requestedVersion)) {
              $versionsToBackup = $configuredVersions
            } else {
              $versionsToBackup = @($requestedVersion)
            }
            
            Write-Host "Backup versions determined: $($versionsToBackup -join ', ')"
            $backupVersionsJson = $versionsToBackup | ConvertTo-Json -Compress
          } else {
            Write-Host "Nightly backup not enabled or configured"
            $backupVersionsJson = '[]'
          }
          
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "backupVersions=$backupVersionsJson"

  CreateBackups:
    needs: [ Initialization ]
    if: (!cancelled()) && fromJson(needs.Initialization.outputs.backupVersions)[0] != null
    strategy:
      matrix:
        bcVersion: ${{ fromJson(needs.Initialization.outputs.backupVersions) }}
      fail-fast: false
    runs-on: ${{ fromJson(needs.Initialization.outputs.githubRunner) }}
    defaults:
      run:
        shell: ${{ needs.Initialization.outputs.githubRunnerShell }}
    name: Create Backup BC ${{ matrix.bcVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        
      - name: Download Latest Staging Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: './staging-artifacts'
          pattern: '*-staging-*'
          merge-multiple: true
        continue-on-error: true
          
      - name: Read settings
        uses: TRASER-Software-GmbH/AL-Go-Actions/ReadSettings@v7.2
        with:
          shell: powershell
          get: nightlyBackup

      - name: Read secrets
        id: ReadSecrets
        uses: TRASER-Software-GmbH/AL-Go-Actions/ReadSecrets@v7.2
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: 'licenseFileUrl,containerUsername,containerPassword,storageCredentials'

      - name: Create Nightly Backup
        uses: TRASER-Software-GmbH/AL-Go-Actions/NightlyBackup@v7.2
        with:
          shell: powershell
          bcVersion: ${{ matrix.bcVersion }}
          forceRecreate: ${{ github.event.inputs.forceRecreate || 'false' }}
          artifactsFolder: './staging-artifacts'
        env:
          Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'

  PostProcess:
    needs: [ Initialization, CreateBackups ]
    if: (!cancelled())
    runs-on: ${{ fromJson(needs.Initialization.outputs.githubRunner) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Finalize the workflow
        id: PostProcess
        uses: TRASER-Software-GmbH/AL-Go-Actions/WorkflowPostProcess@v7.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          shell: powershell
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          currentJobContext: ${{ toJson(job) }}